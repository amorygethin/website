install.packages("frontier")
install.packages("semsfa")
library(frontier)
help("frontier")
help("semsfa")
install.packages("Benchmarking")
?Benchmarking
?sfa
library(Benchmarking)
?sfa
install.packages("gtrendsR")
library(gtrends)
Sys.setenv(GOOGLE_TRENDS_KEY = "AIzaSyC_XLtpfrkVhhC3e4lG93ltwFWFY4LvKHs") # Save your API key as an environment variable
getTimelinesForHealth(
batch_size = 1, # How many terms to process at once
year_batch = "1 year", # How much time to process at once
time.startDate = "2019-06-15", # When to start collecting data
time.endDate = "2020-01-01", # When to stop collecting data
timelineResolutions = c(
"month" # can be month, year, week, or day
),
terms = c(
# The terms you want to pull
'hand washing + hand soap',
'social isolation'
),
names = c(
# The aliases for those pulls (what you want the CSV files
# to be named, in the same order as the terms)
"handwashing",
"socialisolation"
),
geoRestriction.regions = c( # Which regional geographies you want
"US-NY",
"US-CA"
),
geoRestriction.countries = c( # What countries you want
"GB",
"US"
),
geoRestriction.dmas = c( # What dmas you want
),
output_directory = "../output" # Where you want the output data saved
)
library(gtrends)
library(gtrendsR)
Sys.setenv(GOOGLE_TRENDS_KEY = "AIzaSyC_XLtpfrkVhhC3e4lG93ltwFWFY4LvKHs") # Save your API key as an environment variable
getTimelinesForHealth(
batch_size = 1, # How many terms to process at once
year_batch = "1 year", # How much time to process at once
time.startDate = "2019-06-15", # When to start collecting data
time.endDate = "2020-01-01", # When to stop collecting data
timelineResolutions = c(
"month" # can be month, year, week, or day
),
terms = c(
# The terms you want to pull
'hand washing + hand soap',
'social isolation'
),
names = c(
# The aliases for those pulls (what you want the CSV files
# to be named, in the same order as the terms)
"handwashing",
"socialisolation"
),
geoRestriction.regions = c( # Which regional geographies you want
"US-NY",
"US-CA"
),
geoRestriction.countries = c( # What countries you want
"GB",
"US"
),
geoRestriction.dmas = c( # What dmas you want
),
output_directory = "../output" # Where you want the output data saved
)
library(gtrendsR)
getTimelinesForHealth(
batch_size = 1, # How many terms to process at once
year_batch = "1 year", # How much time to process at once
time.startDate = "2019-06-15", # When to start collecting data
time.endDate = "2020-01-01", # When to stop collecting data
timelineResolutions = c(
"month" # can be month, year, week, or day
),
terms = c(
# The terms you want to pull
'hand washing + hand soap',
'social isolation'
),
names = c(
# The aliases for those pulls (what you want the CSV files
# to be named, in the same order as the terms)
"handwashing",
"socialisolation"
),
geoRestriction.regions = c( # Which regional geographies you want
"US-NY",
"US-CA"
),
geoRestriction.countries = c( # What countries you want
"GB",
"US"
),
geoRestriction.dmas = c( # What dmas you want
),
output_directory = "../output" # Where you want the output data saved
)
?getTimelinesForHealth
library(gtrendsR)
library(devtools)
library(devtools)
devtools::install_github("tlcaputi/gtrendR", force = T)
library(devtools)
devtools::install_github("tlcaputi/gtrendR", force = T)
library(devtools)
devtools::install_github("tlcaputi/gtrendR", force = T)
install.packages("devtools")
install.packages("Rtools")
library(devtools)
devtools::install_github("tlcaputi/gtrendR", force = T)
library(gtrendsR)
Sys.setenv(GOOGLE_TRENDS_KEY = "AIzaSyC_XLtpfrkVhhC3e4lG93ltwFWFY4LvKHs") # Save your API key as an environment variable
getTimelinesForHealth(
batch_size = 1, # How many terms to process at once
year_batch = "1 year", # How much time to process at once
time.startDate = "2019-06-15", # When to start collecting data
time.endDate = "2020-01-01", # When to stop collecting data
timelineResolutions = c(
"month" # can be month, year, week, or day
),
terms = c(
# The terms you want to pull
'hand washing + hand soap',
'social isolation'
),
names = c(
# The aliases for those pulls (what you want the CSV files
# to be named, in the same order as the terms)
"handwashing",
"socialisolation"
),
geoRestriction.regions = c( # Which regional geographies you want
"US-NY",
"US-CA"
),
geoRestriction.countries = c( # What countries you want
"GB",
"US"
),
geoRestriction.dmas = c( # What dmas you want
),
output_directory = "../output" # Where you want the output data saved
)
library(devtools)
install.packages("rlang")
library(devtools)
devtools::install_github("tlcaputi/gtrendR", force = T)
library(gtrendsR)
Sys.setenv(GOOGLE_TRENDS_KEY = "AIzaSyC_XLtpfrkVhhC3e4lG93ltwFWFY4LvKHs") # Save your API key as an environment variable
getTimelinesForHealth(
batch_size = 1, # How many terms to process at once
year_batch = "1 year", # How much time to process at once
time.startDate = "2019-06-15", # When to start collecting data
time.endDate = "2020-01-01", # When to stop collecting data
timelineResolutions = c(
"month" # can be month, year, week, or day
),
terms = c(
# The terms you want to pull
'hand washing + hand soap',
'social isolation'
),
names = c(
# The aliases for those pulls (what you want the CSV files
# to be named, in the same order as the terms)
"handwashing",
"socialisolation"
),
geoRestriction.regions = c( # Which regional geographies you want
"US-NY",
"US-CA"
),
geoRestriction.countries = c( # What countries you want
"GB",
"US"
),
geoRestriction.dmas = c( # What dmas you want
),
output_directory = "../output" # Where you want the output data saved
)
library(gtrendsR)
Sys.setenv(GOOGLE_TRENDS_KEY = "AIzaSyC_XLtpfrkVhhC3e4lG93ltwFWFY4LvKHs") # Save your API key as an environment variable
getTimelinesForHealth(
batch_size = 1, # How many terms to process at once
year_batch = "1 year", # How much time to process at once
time.startDate = "2019-06-15", # When to start collecting data
time.endDate = "2020-01-01", # When to stop collecting data
timelineResolutions = c(
"month" # can be month, year, week, or day
),
terms = c(
# The terms you want to pull
'hand washing + hand soap',
'social isolation'
),
names = c(
# The aliases for those pulls (what you want the CSV files
# to be named, in the same order as the terms)
"handwashing",
"socialisolation"
),
geoRestriction.regions = c( # Which regional geographies you want
"US-NY",
"US-CA"
),
geoRestriction.countries = c( # What countries you want
"GB",
"US"
),
geoRestriction.dmas = c( # What dmas you want
),
output_directory = "../output" # Where you want the output data saved
)
#library(devtools)
devtools::install_github("tlcaputi/gtrendR", force = T)
warnings()
library(gtrendsR)
Sys.setenv(GOOGLE_TRENDS_KEY = "AIzaSyC_XLtpfrkVhhC3e4lG93ltwFWFY4LvKHs") # Save your API key as an environment variable
getTimelinesForHealth(
batch_size = 1, # How many terms to process at once
year_batch = "1 year", # How much time to process at once
time.startDate = "2019-06-15", # When to start collecting data
time.endDate = "2020-01-01", # When to stop collecting data
timelineResolutions = c(
"month" # can be month, year, week, or day
),
terms = c(
# The terms you want to pull
'hand washing + hand soap',
'social isolation'
),
names = c(
# The aliases for those pulls (what you want the CSV files
# to be named, in the same order as the terms)
"handwashing",
"socialisolation"
),
geoRestriction.regions = c( # Which regional geographies you want
"US-NY",
"US-CA"
),
geoRestriction.countries = c( # What countries you want
"GB",
"US"
),
geoRestriction.dmas = c( # What dmas you want
),
output_directory = "../output" # Where you want the output data saved
)
library(gtrendsR)
Sys.setenv(GOOGLE_TRENDS_KEY = "AIzaSyC_XLtpfrkVhhC3e4lG93ltwFWFY4LvKHs") # Save your API key as an environment variable
getTimelinesForHealth(
batch_size = 1, # How many terms to process at once
year_batch = "1 year", # How much time to process at once
time.startDate = "2019-06-15", # When to start collecting data
time.endDate = "2020-01-01", # When to stop collecting data
timelineResolutions = c(
"month" # can be month, year, week, or day
),
terms = c(
# The terms you want to pull
'hand washing + hand soap',
'social isolation'
),
names = c(
# The aliases for those pulls (what you want the CSV files
# to be named, in the same order as the terms)
"handwashing",
"socialisolation"
),
geoRestriction.regions = c( # Which regional geographies you want
"US-NY",
"US-CA"
),
geoRestriction.countries = c( # What countries you want
"GB",
"US"
),
geoRestriction.dmas = c( # What dmas you want
),
output_directory = "../output" # Where you want the output data saved
)
getTimelinesForHealth(
batch_size = 1, # How many terms to process at once
year_batch = "1 year", # How much time to process at once
time.startDate = "2019-06-15", # When to start collecting data
time.endDate = "2020-01-01", # When to stop collecting data
timelineResolutions = c(
"month" # can be month, year, week, or day
),
terms = c(
# The terms you want to pull
'hand washing + hand soap',
'social isolation'
),
names = c(
# The aliases for those pulls (what you want the CSV files
# to be named, in the same order as the terms)
"handwashing",
"socialisolation"
),
geoRestriction.regions = c( # Which regional geographies you want
"US-NY",
"US-CA"
),
geoRestriction.countries = c( # What countries you want
"GB",
"US"
),
geoRestriction.dmas = c( # What dmas you want
),
output_directory = "../output" # Where you want the output data saved
)
df = gtrends(
keyword = "trump",
geo = "US",
time = "today+5-y",
gprop = c("web"),
category = 0,
hl = "en-US",
compared_breakdown = FALSE,
low_search_volume = FALSE,
cookie_url = "http://trends.google.com/Cookies/NID",
tz = 0,
onlyInterest = FALSE
)
View(df)
getTimelinesForHealth(
batch_size = 1, # How many terms to process at once
year_batch = "1 year", # How much time to process at once
time.startDate = "2019-06-15", # When to start collecting data
time.endDate = "2020-01-01", # When to stop collecting data
timelineResolutions = c(
"month" # can be month, year, week, or day
),
terms = c(
# The terms you want to pull
'hand washing + hand soap',
'social isolation'
),
names = c(
# The aliases for those pulls (what you want the CSV files
# to be named, in the same order as the terms)
"handwashing",
"socialisolation"
),
geoRestriction.regions = c( # Which regional geographies you want
"US-NY",
"US-CA"
),
geoRestriction.countries = c( # What countries you want
"GB",
"US"
),
geoRestriction.dmas = c( # What dmas you want
),
output_directory = "../output" # Where you want the output data saved
)
remove.packages("gtrendsR")
library(gtrendsR)
getTimelinesForHealth(
batch_size = 1, # How many terms to process at once
year_batch = "1 year", # How much time to process at once
time.startDate = "2019-06-15", # When to start collecting data
time.endDate = "2020-01-01", # When to stop collecting data
timelineResolutions = c(
"month" # can be month, year, week, or day
),
terms = c(
# The terms you want to pull
'hand washing + hand soap',
'social isolation'
),
names = c(
# The aliases for those pulls (what you want the CSV files
# to be named, in the same order as the terms)
"handwashing",
"socialisolation"
),
geoRestriction.regions = c( # Which regional geographies you want
"US-NY",
"US-CA"
),
geoRestriction.countries = c( # What countries you want
"GB",
"US"
),
geoRestriction.dmas = c( # What dmas you want
),
output_directory = "../output" # Where you want the output data saved
)
rmarkdown::render_site()
library(rmarkdown)
rmarkdown::render_site()
setwd("C:/Users/amory/Dropbox/Documents/Web/R/hello-website")
setwd("C:/Users/amory/Dropbox/Documents/Web/R")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
<div class="divresearch">
<a href="http://piketty.pse.ens.fr/files/Gethin2018.pdf">
Building a Global Income Distribution Brick by Brick
</a>
Lucas Chancel, Amory Gethin
<em>Master Thesis directed by Thomas Piketty and Abhijit V. Banerjee, June 2018</em>
</div>
rmarkdown::render_site()
